name: Deploy Infra and Stack

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Clone infra repo (PAT)
        run: |
          set -e
          git clone --depth=1 --branch main \
            https://x-access-token:${{ secrets.INFRA_REPO_TOKEN }}@github.com/gitmur444/AnabolicInfra.git \
            infra
      - name: Prepare Lightsail SSH public key for Terraform
        run: |
          set -e
          mkdir -p ~/.ssh
          KEY_PATH=~/.ssh/anabolic
          
          # Write the SSH private key from secrets with proper formatting
          if [ -n "${{ secrets.LIGHTSAIL_SSH_KEY }}" ]; then
            # Handle potential line break issues from GitHub Secrets
            echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | sed 's/\\n/\n/g' > "$KEY_PATH"
            
            # Ensure proper line endings
            sed -i 's/\r$//' "$KEY_PATH" 2>/dev/null || true
            
            echo "SSH private key written from LIGHTSAIL_SSH_KEY"
            echo "Key file size: $(wc -c < "$KEY_PATH") bytes"
            
            # Validate the key format
            if ! grep -q "BEGIN.*PRIVATE KEY" "$KEY_PATH"; then
              echo "ERROR: Key doesn't appear to have proper BEGIN header"
              echo "First line: $(head -1 "$KEY_PATH")"
              exit 1
            fi
            
            if ! grep -q "END.*PRIVATE KEY" "$KEY_PATH"; then
              echo "ERROR: Key doesn't appear to have proper END footer"  
              echo "Last line: $(tail -1 "$KEY_PATH")"
              exit 1
            fi
            
          else
            echo "ERROR: LIGHTSAIL_SSH_KEY secret not found" >&2
            exit 1
          fi
          
          chmod 600 "$KEY_PATH"
          
          # Generate public key from private key
          mkdir -p infra/infra/keys
          ssh-keygen -y -f "$KEY_PATH" > infra/infra/keys/anabolic.pub
          echo "Generated public key for Terraform"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform Apply
        working-directory: infra/infra/terraform
        run: |
          set -e
          terraform init -reconfigure -input=false
          terraform workspace select dev || terraform workspace new dev
          # Recreate instance with a CI-managed key that matches the secret-derived public key
          terraform apply -auto-approve -input=false \
            -var ssh_key_name=anabolic-key-ci \
            -var create_key_pair=true \
            -var create_instance=true \
            -var create_static_ip=false \
            -var existing_static_ip_name=anabolic-litellm-ip
      - name: Get public IP
        id: ip
        working-directory: infra/infra/terraform
        run: |
          echo "ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
      - name: Sync stack files
        run: |
          IP=${{ steps.ip.outputs.ip }}
          echo "Deploy to $IP"
          KEY_PATH=~/.ssh/anabolic
          
          # Wait for SSH to become ready after instance replacement
          echo "Waiting for SSH connection to be ready..."
          for i in {1..30}; do
            if ssh -i "$KEY_PATH" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 ubuntu@${IP} "echo ok" >/dev/null 2>&1; then
              echo "SSH connection established"
              break
            fi
            echo "Waiting for SSH... ($i/30)"
            sleep 5
          done
          
          # Sync files to server
          export RSYNC_RSH="ssh -i $KEY_PATH -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          rsync -avz infra/infra/stack/ ubuntu@${IP}:/opt/stack/
      - name: Fetch secrets from SSM and start stack
        run: |
          IP=${{ steps.ip.outputs.ip }}
          ANTHROPIC=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/ANTHROPIC_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          PROXY=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/LITELLM_PROXY_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          ssh -i ~/.ssh/anabolic -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${IP} "bash -s" <<'SSH'
          set -e
          cd /opt/stack
          # write .env
          cat > .env <<ENV
          ANTHROPIC_API_KEY=__ANTHROPIC__
          LITELLM_PROXY_API_KEY=__PROXY__
          ENV
          sed -i 's/__ANTHROPIC__/'"$(printf %s "$ANTHROPIC" | sed 's/[\&/]/\\&/g')"'/' .env
          sed -i 's/__PROXY__/'"$(printf %s "$PROXY" | sed 's/[\&/]/\\&/g')"'/' .env
          chmod 600 .env
          export $(cat .env | xargs)
          docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true
          docker compose pull || true
          docker compose up -d
          SSH
