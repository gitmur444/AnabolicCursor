name: Deploy Infra and Stack

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Clone infra repo (PAT)
        run: |
          set -e
          git clone --depth=1 --branch main \
            https://x-access-token:${{ secrets.INFRA_REPO_TOKEN }}@github.com/gitmur444/AnabolicInfra.git \
            infra
      - name: Prepare Lightsail SSH public key for Terraform
        run: |
          set -e
          mkdir -p ~/.ssh
          KEY_PATH=~/.ssh/anabolic
          
          # Write the SSH private key from secrets
          if [ -n "${{ secrets.LIGHTSAIL_SSH_KEY_B64 }}" ]; then
            # Decode base64 SSH key
            echo "${{ secrets.LIGHTSAIL_SSH_KEY_B64 }}" | base64 -d > "$KEY_PATH"
            echo "SSH private key decoded from LIGHTSAIL_SSH_KEY_B64"
          elif [ -n "${{ secrets.LIGHTSAIL_SSH_KEY }}" ]; then
            # Handle plain text SSH key with potential formatting issues
            echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | sed 's/\\n/\n/g' > "$KEY_PATH"
            sed -i 's/\r$//' "$KEY_PATH" 2>/dev/null || true
            echo "SSH private key written from LIGHTSAIL_SSH_KEY"
          else
            echo "ERROR: Neither LIGHTSAIL_SSH_KEY_B64 nor LIGHTSAIL_SSH_KEY found" >&2
            exit 1
          fi
          
          # Validate key format
          echo "Key file size: $(wc -c < "$KEY_PATH") bytes"
          if ! grep -q "BEGIN.*PRIVATE KEY" "$KEY_PATH"; then
            echo "ERROR: Key missing BEGIN header"
            head -1 "$KEY_PATH"
            exit 1
          fi
          
          chmod 600 "$KEY_PATH"
          
          # Debug the key before trying to use it
          echo "=== DEBUGGING SSH KEY ==="
          echo "Key file exists: $([ -f "$KEY_PATH" ] && echo "YES" || echo "NO")"
          echo "Key permissions: $(ls -la "$KEY_PATH" 2>/dev/null || echo "N/A")"
          echo "First 3 lines:"
          head -3 "$KEY_PATH" | cat -A
          echo "Last 3 lines:"
          tail -3 "$KEY_PATH" | cat -A
          echo "Line count: $(wc -l < "$KEY_PATH")"
          echo "Character count: $(wc -c < "$KEY_PATH")"
          echo "==========================="
          
          # Try to generate public key from private key
          mkdir -p infra/infra/keys
          if ssh-keygen -y -f "$KEY_PATH" > infra/infra/keys/anabolic.pub 2>&1; then
            echo "Generated public key for Terraform successfully"
          else
            echo "Failed to generate public key. Trying to fix common issues..."
            
            # Try different approaches to fix the key
            echo "Attempting to rewrite key with printf..."
            printf '%s\n' "${{ secrets.LIGHTSAIL_SSH_KEY }}" > "$KEY_PATH.tmp"
            chmod 600 "$KEY_PATH.tmp"
            
            if ssh-keygen -y -f "$KEY_PATH.tmp" > infra/infra/keys/anabolic.pub 2>&1; then
              echo "Success with printf method!"
              mv "$KEY_PATH.tmp" "$KEY_PATH"
            else
              echo "Still failed. The SSH key in GitHub Secrets may be corrupted."
              echo "Please check that the key is properly formatted with proper line breaks."
              exit 1
            fi
          fi
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform Apply
        working-directory: infra/infra/terraform
        run: |
          set -e
          terraform init -reconfigure -input=false
          terraform workspace select dev || terraform workspace new dev
          
          # Show current Lightsail resources before apply
          echo "=== Current Lightsail Resources ==="
          aws lightsail get-instances --region eu-central-1 --query "instances[].{Name:name,State:state.name,KeyName:sshKeyName}" --output table || true
          aws lightsail get-key-pairs --region eu-central-1 --query "keyPairs[].{Name:name,Fingerprint:fingerprint}" --output table || true
          
          # Recreate instance with a CI-managed key that matches the secret-derived public key
          echo "=== Applying Terraform Configuration ==="
          terraform apply -auto-approve -input=false \
            -var ssh_key_name=anabolic-key-ci \
            -var create_key_pair=true \
            -var create_instance=true \
            -var create_static_ip=false \
            -var existing_static_ip_name=anabolic-litellm-ip
          
          # Show resources after apply
          echo "=== Resources After Terraform Apply ==="
          aws lightsail get-instances --region eu-central-1 --query "instances[].{Name:name,State:state.name,KeyName:sshKeyName}" --output table || true
          aws lightsail get-key-pairs --region eu-central-1 --query "keyPairs[].{Name:name,Fingerprint:fingerprint}" --output table || true
      - name: Get public IP
        id: ip
        working-directory: infra/infra/terraform
        run: |
          echo "=== Terraform Output Debug ==="
          terraform output || echo "No outputs available"
          
          # Try to get public IP from various sources
          IP=""
          
          # Method 1: Try terraform output (check if it's a valid IP, not a warning)
          if OUTPUT=$(terraform output -raw public_ip 2>/dev/null); then
            if echo "$OUTPUT" | grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
              IP="$OUTPUT"
              echo "Got IP from terraform output: $IP"
            else
              echo "Terraform output contains warnings/errors, not an IP address"
            fi
          fi
          
          # Method 2: Try terraform show if no IP yet
          if [ -z "$IP" ]; then
            if OUTPUT=$(terraform show -json 2>/dev/null | jq -r '.values.outputs.public_ip.value' 2>/dev/null); then
              if echo "$OUTPUT" | grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
                IP="$OUTPUT"
                echo "Got IP from terraform show: $IP"
              fi
            fi
          fi
          
          # Method 3: Try AWS CLI if still no IP
          if [ -z "$IP" ]; then
            echo "Terraform outputs not available, trying AWS CLI..."
            INSTANCE_NAME="anabolic-litellm"
            if OUTPUT=$(aws lightsail get-instances --region eu-central-1 \
              --query "instances[?name=='$INSTANCE_NAME'].publicIpAddress" \
              --output text 2>/dev/null); then
              if echo "$OUTPUT" | grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
                IP="$OUTPUT"
                echo "Got IP from AWS Lightsail CLI: $IP"
              fi
            fi
          fi
          
          # Final check
          if [ -z "$IP" ]; then
            echo "ERROR: Cannot find public IP from any source"
            echo "Available terraform outputs:"
            terraform output -json 2>/dev/null || echo "No outputs in JSON format"
            echo "Lightsail instances:"
            aws lightsail get-instances --region eu-central-1 --query "instances[].{Name:name,State:state.name,IP:publicIpAddress}" --output table 2>/dev/null || echo "AWS CLI failed"
            exit 1
          fi
          
          echo "ip=$IP" >> $GITHUB_OUTPUT
          echo "Final IP set to: $IP"
      - name: Sync stack files
        run: |
          IP=${{ steps.ip.outputs.ip }}
          echo "Deploy to $IP"
          KEY_PATH=~/.ssh/anabolic
          
          # Debug SSH key and Lightsail setup
          echo "=== SSH Key Debugging ==="
          echo "Key file exists: $([ -f "$KEY_PATH" ] && echo "YES" || echo "NO")"
          echo "Key permissions: $(ls -la "$KEY_PATH")"
          LOCAL_FINGERPRINT=$(ssh-keygen -lf "$KEY_PATH" | cut -d' ' -f2)
          echo "Local private key fingerprint: $LOCAL_FINGERPRINT"
          
          # Check Lightsail key pairs
          echo "=== Lightsail Key Pairs ==="
          aws lightsail get-key-pairs --region eu-central-1 --query "keyPairs[].{Name:name,Fingerprint:fingerprint}" --output table || echo "Failed to get key pairs"
          
          # Get the fingerprint of the key assigned to our instance
          INSTANCE_KEY_NAME=$(aws lightsail get-instance --region eu-central-1 --instance-name anabolic-litellm --query "instance.sshKeyName" --output text || echo "")
          echo "=== Instance Key Assignment ==="
          echo "Instance SSH key name: $INSTANCE_KEY_NAME"
          
          if [ -n "$INSTANCE_KEY_NAME" ] && [ "$INSTANCE_KEY_NAME" != "None" ]; then
            LIGHTSAIL_FINGERPRINT=$(aws lightsail get-key-pair --region eu-central-1 --key-pair-name "$INSTANCE_KEY_NAME" --query "keyPair.fingerprint" --output text 2>/dev/null || echo "")
            echo "Lightsail key fingerprint: $LIGHTSAIL_FINGERPRINT"
            
            # Convert SSH fingerprint format to match Lightsail format for comparison
            LOCAL_FINGERPRINT_B64=$(ssh-keygen -lf "$KEY_PATH" -E md5 | cut -d' ' -f2 | cut -d':' -f2- | xxd -r -p | base64)
            
            if [ "$LIGHTSAIL_FINGERPRINT" != "$LOCAL_FINGERPRINT_B64" ]; then
              echo "‚ùå FINGERPRINT MISMATCH DETECTED!"
              echo "This explains why SSH authentication is failing."
              echo "The instance is using a different key than the one in GitHub Secrets."
              echo "You need to either:"
              echo "1. Update LIGHTSAIL_SSH_KEY_B64 with the matching private key, or"
              echo "2. Recreate the Lightsail key pair with the current public key"
              
              # Try to update the key pair
              echo "Attempting to update Lightsail key pair with current public key..."
              if aws lightsail delete-key-pair --region eu-central-1 --key-pair-name "$INSTANCE_KEY_NAME" 2>/dev/null; then
                echo "Deleted old key pair"
                # Import new key
                PUBLIC_KEY_CONTENT=$(ssh-keygen -y -f "$KEY_PATH")
                if aws lightsail import-key-pair --region eu-central-1 --key-pair-name "$INSTANCE_KEY_NAME" --public-key-base64 "$(echo "$PUBLIC_KEY_CONTENT" | base64 -w 0)" 2>/dev/null; then
                  echo "‚úÖ Successfully imported new key pair"
                else
                  echo "‚ùå Failed to import new key pair"
                fi
              else
                echo "‚ùå Failed to delete old key pair"
              fi
            else
              echo "‚úÖ Fingerprints match!"
            fi
          else
            echo "‚ùå No SSH key assigned to instance"
          fi
          
          # Wait for SSH to become ready with verbose output
          echo "=== SSH Connection Testing ==="
          for i in {1..10}; do
            echo "Attempt $i/10: Testing SSH connection..."
            if ssh -v -i "$KEY_PATH" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 ubuntu@${IP} "echo ok" 2>&1; then
              echo "SSH connection established successfully!"
              break
            fi
            echo "SSH attempt $i failed, waiting 10 seconds..."
            sleep 10
          done
          
          # Final connection test before rsync
          echo "Final SSH test before rsync..."
          if ! ssh -i "$KEY_PATH" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ubuntu@${IP} "echo 'SSH works'" 2>&1; then
            echo "ERROR: SSH connection failed, cannot proceed with rsync"
            echo "Trying different SSH options..."
            ssh -v -i "$KEY_PATH" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${IP} "echo 'test'" 2>&1 || true
            exit 1
          fi
          
          # Sync files to server
          echo "Starting file sync..."
          export RSYNC_RSH="ssh -i $KEY_PATH -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          rsync -avz infra/infra/stack/ ubuntu@${IP}:/opt/stack/
      - name: Fetch secrets from SSM and start stack
        run: |
          IP=${{ steps.ip.outputs.ip }}
          ANTHROPIC=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/ANTHROPIC_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          PROXY=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/LITELLM_PROXY_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          ssh -i ~/.ssh/anabolic -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${IP} "bash -s" <<'SSH'
          set -e
          cd /opt/stack
          # write .env
          cat > .env <<ENV
          ANTHROPIC_API_KEY=__ANTHROPIC__
          LITELLM_PROXY_API_KEY=__PROXY__
          ENV
          sed -i 's/__ANTHROPIC__/'"$(printf %s "$ANTHROPIC" | sed 's/[\&/]/\\&/g')"'/' .env
          sed -i 's/__PROXY__/'"$(printf %s "$PROXY" | sed 's/[\&/]/\\&/g')"'/' .env
          chmod 600 .env
          export $(cat .env | xargs)
          docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true
          docker compose pull || true
          docker compose up -d
          SSH
