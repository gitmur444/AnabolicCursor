name: Deploy Infra and Stack

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Clone infra repo (PAT)
        run: |
          set -e
          git clone --depth=1 --branch main \
            https://x-access-token:${{ secrets.INFRA_REPO_TOKEN }}@github.com/gitmur444/AnabolicInfra.git \
            infra
      - name: Prepare Lightsail SSH public key for Terraform
        run: |
          set -e
          mkdir -p ~/.ssh
          KEY_PATH=~/.ssh/anabolic
          
          # Write the SSH private key from secrets
          if [ -n "${{ secrets.LIGHTSAIL_SSH_KEY_B64 }}" ]; then
            # Decode base64 SSH key
            echo "${{ secrets.LIGHTSAIL_SSH_KEY_B64 }}" | base64 -d > "$KEY_PATH"
            echo "SSH private key decoded from LIGHTSAIL_SSH_KEY_B64"
          elif [ -n "${{ secrets.LIGHTSAIL_SSH_KEY }}" ]; then
            # Handle plain text SSH key with potential formatting issues
            echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | sed 's/\\n/\n/g' > "$KEY_PATH"
            sed -i 's/\r$//' "$KEY_PATH" 2>/dev/null || true
            echo "SSH private key written from LIGHTSAIL_SSH_KEY"
          else
            echo "ERROR: Neither LIGHTSAIL_SSH_KEY_B64 nor LIGHTSAIL_SSH_KEY found" >&2
            exit 1
          fi
          
          # Validate key format
          echo "Key file size: $(wc -c < "$KEY_PATH") bytes"
          if ! grep -q "BEGIN.*PRIVATE KEY" "$KEY_PATH"; then
            echo "ERROR: Key missing BEGIN header"
            head -1 "$KEY_PATH"
            exit 1
          fi
          
          chmod 600 "$KEY_PATH"
          
          # Debug the key before trying to use it
          echo "=== DEBUGGING SSH KEY ==="
          echo "Key file exists: $([ -f "$KEY_PATH" ] && echo "YES" || echo "NO")"
          echo "Key permissions: $(ls -la "$KEY_PATH" 2>/dev/null || echo "N/A")"
          echo "First 3 lines:"
          head -3 "$KEY_PATH" | cat -A
          echo "Last 3 lines:"
          tail -3 "$KEY_PATH" | cat -A
          echo "Line count: $(wc -l < "$KEY_PATH")"
          echo "Character count: $(wc -c < "$KEY_PATH")"
          echo "==========================="
          
          # Try to generate public key from private key
          mkdir -p infra/infra/keys
          if ssh-keygen -y -f "$KEY_PATH" > infra/infra/keys/anabolic.pub 2>&1; then
            echo "Generated public key for Terraform successfully"
          else
            echo "Failed to generate public key. Trying to fix common issues..."
            
            # Try different approaches to fix the key
            echo "Attempting to rewrite key with printf..."
            printf '%s\n' "${{ secrets.LIGHTSAIL_SSH_KEY }}" > "$KEY_PATH.tmp"
            chmod 600 "$KEY_PATH.tmp"
            
            if ssh-keygen -y -f "$KEY_PATH.tmp" > infra/infra/keys/anabolic.pub 2>&1; then
              echo "Success with printf method!"
              mv "$KEY_PATH.tmp" "$KEY_PATH"
            else
              echo "Still failed. The SSH key in GitHub Secrets may be corrupted."
              echo "Please check that the key is properly formatted with proper line breaks."
              exit 1
            fi
          fi
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Terraform Apply
        working-directory: infra/infra/terraform
        run: |
          set -e
          terraform init -reconfigure -input=false
          terraform workspace select dev || terraform workspace new dev
          # Recreate instance with a CI-managed key that matches the secret-derived public key
          terraform apply -auto-approve -input=false \
            -var ssh_key_name=anabolic-key-ci \
            -var create_key_pair=true \
            -var create_instance=true \
            -var create_static_ip=false \
            -var existing_static_ip_name=anabolic-litellm-ip
      - name: Get public IP
        id: ip
        working-directory: infra/infra/terraform
        run: |
          echo "=== Terraform Output Debug ==="
          terraform output || echo "No outputs available"
          
          # Try to get public IP from various sources
          if IP=$(terraform output -raw public_ip 2>/dev/null) && [ -n "$IP" ]; then
            echo "Got IP from terraform output: $IP"
          elif IP=$(terraform show -json | jq -r '.values.outputs.public_ip.value' 2>/dev/null) && [ -n "$IP" ] && [ "$IP" != "null" ]; then
            echo "Got IP from terraform show: $IP"
          else
            echo "Terraform outputs not available, trying AWS CLI..."
            # Try to get instance IP using AWS CLI
            INSTANCE_NAME="anabolic-litellm"
            IP=$(aws lightsail get-instances --region eu-central-1 \
              --query "instances[?name=='$INSTANCE_NAME'].publicIpAddress" \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$IP" ] && [ "$IP" != "None" ]; then
              echo "Got IP from AWS Lightsail CLI: $IP"
            else
              echo "ERROR: Cannot find public IP from any source"
              echo "Available terraform outputs:"
              terraform output -json || echo "No outputs in JSON format"
              echo "Lightsail instances:"
              aws lightsail get-instances --region eu-central-1 --query "instances[].{Name:name,State:state.name,IP:publicIpAddress}" --output table || echo "AWS CLI failed"
              exit 1
            fi
          fi
          
          echo "ip=$IP" >> $GITHUB_OUTPUT
          echo "Final IP set to: $IP"
      - name: Sync stack files
        run: |
          IP=${{ steps.ip.outputs.ip }}
          echo "Deploy to $IP"
          KEY_PATH=~/.ssh/anabolic
          
          # Wait for SSH to become ready after instance replacement
          echo "Waiting for SSH connection to be ready..."
          for i in {1..30}; do
            if ssh -i "$KEY_PATH" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 ubuntu@${IP} "echo ok" >/dev/null 2>&1; then
              echo "SSH connection established"
              break
            fi
            echo "Waiting for SSH... ($i/30)"
            sleep 5
          done
          
          # Sync files to server
          export RSYNC_RSH="ssh -i $KEY_PATH -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          rsync -avz infra/infra/stack/ ubuntu@${IP}:/opt/stack/
      - name: Fetch secrets from SSM and start stack
        run: |
          IP=${{ steps.ip.outputs.ip }}
          ANTHROPIC=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/ANTHROPIC_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          PROXY=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/LITELLM_PROXY_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          ssh -i ~/.ssh/anabolic -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${IP} "bash -s" <<'SSH'
          set -e
          cd /opt/stack
          # write .env
          cat > .env <<ENV
          ANTHROPIC_API_KEY=__ANTHROPIC__
          LITELLM_PROXY_API_KEY=__PROXY__
          ENV
          sed -i 's/__ANTHROPIC__/'"$(printf %s "$ANTHROPIC" | sed 's/[\&/]/\\&/g')"'/' .env
          sed -i 's/__PROXY__/'"$(printf %s "$PROXY" | sed 's/[\&/]/\\&/g')"'/' .env
          chmod 600 .env
          export $(cat .env | xargs)
          docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true
          docker compose pull || true
          docker compose up -d
          SSH
