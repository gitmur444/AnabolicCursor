name: Deploy Infra and Stack

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Clone infra repo
        run: |
          set -e
          git clone --depth=1 --branch main \
            https://x-access-token:${{ secrets.INFRA_REPO_TOKEN }}@github.com/gitmur444/AnabolicInfra.git \
            infra
      
      - name: Prepare SSH key and generate public key
        run: |
          set -e
          mkdir -p ~/.ssh
          KEY_PATH=~/.ssh/anabolic
          
          # Write the SSH private key from base64 encoded secret
          if [ -n "${{ secrets.LIGHTSAIL_SSH_KEY_B64 }}" ]; then
            echo "${{ secrets.LIGHTSAIL_SSH_KEY_B64 }}" | base64 -d > "$KEY_PATH"
            echo "SSH private key decoded from LIGHTSAIL_SSH_KEY_B64"
          else
            echo "ERROR: LIGHTSAIL_SSH_KEY_B64 secret not found" >&2
            exit 1
          fi
          
          chmod 600 "$KEY_PATH"
          
          # Generate public key for Terraform
          mkdir -p infra/infra/keys
          ssh-keygen -y -f "$KEY_PATH" > infra/infra/keys/anabolic.pub
          
          # Verify fingerprints match
          LOCAL_FINGERPRINT=$(ssh-keygen -lf "$KEY_PATH" | cut -d' ' -f2)
          GENERATED_FINGERPRINT=$(ssh-keygen -lf infra/infra/keys/anabolic.pub | cut -d' ' -f2)
          echo "Local SSH key fingerprint: $LOCAL_FINGERPRINT"
          echo "Generated public key fingerprint: $GENERATED_FINGERPRINT"
          
          if [ "$GENERATED_FINGERPRINT" = "$LOCAL_FINGERPRINT" ]; then
            echo "‚úÖ Public key correctly matches private key"
          else
            echo "‚ùå ERROR: Generated public key doesn't match private key!"
            exit 1
          fi
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: eu-central-1
      - name: Clean up and deploy infrastructure
        working-directory: infra/infra/terraform
        run: |
          set -e
          
          # Clean up old resources first
          echo "üßπ Cleaning up old resources..."
          aws lightsail delete-key-pair --region eu-central-1 --key-pair-name anabolic-key-ci 2>/dev/null && echo "Deleted old key pair" || echo "Old key pair not found"
          aws lightsail delete-instance --region eu-central-1 --instance-name anabolic-litellm 2>/dev/null && echo "Deleted old instance" || echo "Old instance not found"
          
          echo "Waiting for cleanup to complete..."
          sleep 10
          
          # Try to import SSH key to Lightsail (optional)
          echo "üîê Importing SSH key to Lightsail..."
          PUBLIC_KEY_CONTENT=$(cat ../keys/anabolic.pub)
          KEY_IMPORTED=false
          
          if aws lightsail import-key-pair --region eu-central-1 --key-pair-name anabolic-key-ci --public-key-base64 "$(echo "$PUBLIC_KEY_CONTENT" | base64 -w 0)" 2>&1; then
            echo "‚úÖ Successfully imported key pair to Lightsail"
            KEY_IMPORTED=true
          else
            echo "‚ùå Failed to import key pair, will let Terraform create it"
            KEY_IMPORTED=false
          fi
          
          # Initialize and apply Terraform
          echo "üèóÔ∏è Deploying infrastructure with Terraform..."
          terraform init -reconfigure -input=false
          terraform workspace select dev || terraform workspace new dev
          
          if [ "$KEY_IMPORTED" = "true" ]; then
            terraform apply -auto-approve -input=false \
              -var ssh_key_name=anabolic-key-ci \
              -var create_key_pair=false \
              -var create_instance=true \
              -var create_static_ip=false \
              -var existing_static_ip_name=anabolic-litellm-ip
          else
            terraform apply -auto-approve -input=false \
              -var ssh_key_name=anabolic-key-ci \
              -var create_key_pair=true \
              -var create_instance=true \
              -var create_static_ip=false \
              -var existing_static_ip_name=anabolic-litellm-ip
          fi
          
          echo "Resources after Terraform apply:"
          aws lightsail get-instances --region eu-central-1 --query "instances[].{Name:name,State:state.name,KeyName:sshKeyName}" --output table 2>/dev/null || echo "No instances found"
      - name: Get public IP
        id: ip
        working-directory: infra/infra/terraform
        run: |
          echo "üåê Getting public IP address..."
          IP=""
          
          # Try Terraform output first
          if OUTPUT=$(terraform output -raw public_ip 2>/dev/null); then
            if echo "$OUTPUT" | grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
              IP="$OUTPUT"
              echo "Got IP from terraform output: $IP"
            fi
          fi
          
          # Fallback to AWS CLI
          if [ -z "$IP" ]; then
            echo "Terraform output not available, trying AWS CLI..."
            if OUTPUT=$(aws lightsail get-instances --region eu-central-1 \
              --query "instances[?name=='anabolic-litellm'].publicIpAddress" \
              --output text 2>/dev/null); then
              if echo "$OUTPUT" | grep -qE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
                IP="$OUTPUT"
                echo "Got IP from AWS Lightsail CLI: $IP"
              fi
            fi
          fi
          
          if [ -z "$IP" ]; then
            echo "‚ùå ERROR: Cannot find public IP from any source"
            exit 1
          fi
          
          echo "‚úÖ Instance Public IP: $IP"
          echo "ip=$IP" >> $GITHUB_OUTPUT
      - name: Deploy application stack
        run: |
          IP=${{ steps.ip.outputs.ip }}
          KEY_PATH=~/.ssh/anabolic
          
          echo "üîå Testing SSH connection to $IP..."
          # Wait for SSH to become ready
          SSH_WORKING=false
          for i in {1..20}; do
            echo "Attempt $i/20: Testing SSH connection..."
            if ssh -i "$KEY_PATH" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ubuntu@"$IP" "echo 'SSH connection successful'" 2>/dev/null; then
              echo "‚úÖ SSH connection established successfully!"
              SSH_WORKING=true
              break
            fi
            echo "SSH attempt $i failed, waiting 15 seconds..."
            sleep 15
          done

          if [ "$SSH_WORKING" != "true" ]; then
            echo "‚ùå SSH connection failed after 20 attempts"
            exit 1
          fi
          
          echo "üì¶ Creating stack directory and setting permissions..."
          ssh -i "$KEY_PATH" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@"$IP" "sudo mkdir -p /opt/stack && sudo chown ubuntu:ubuntu /opt/stack"
          
          echo "üì§ Syncing stack files to $IP..."
          export RSYNC_RSH="ssh -i $KEY_PATH -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          rsync -avz infra/infra/stack/ ubuntu@"$IP":/opt/stack/
      - name: Start services with secrets from SSM
        run: |
          IP=${{ steps.ip.outputs.ip }}
          KEY_PATH=~/.ssh/anabolic
          
          echo "üîê Fetching secrets from SSM..."
          ANTHROPIC=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/ANTHROPIC_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          PROXY=$(aws ssm get-parameter --region eu-central-1 --name "/anabolic/litellm/LITELLM_PROXY_API_KEY" --with-decryption --query "Parameter.Value" --output text)
          
          echo "üöÄ Starting services on $IP..."
          ssh -i "$KEY_PATH" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@"$IP" "bash -s" <<EOF
          set -e
          cd /opt/stack

          # Install Docker if not present
          if ! command -v docker >/dev/null 2>&1; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com | sudo sh
            sudo usermod -aG docker ubuntu
            sudo systemctl enable docker
            sudo systemctl start docker
            sleep 5
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
          fi

          # Create .env file
          cat > .env <<ENVFILE
          ANTHROPIC_API_KEY=$ANTHROPIC
          LITELLM_PROXY_API_KEY=$PROXY
          ENVFILE

          chmod 600 .env
          export \$(cat .env | xargs)

          # Install Docker plugins and start services
          sudo docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions || true
          sudo docker compose pull || true
          sudo docker compose up -d

          echo "Services started successfully!"
          sudo docker compose ps
          EOF
          
          echo ""
          echo "üéâ Deployment completed successfully!"
          echo "üìä Access your services:"
          echo "  LiteLLM Proxy: http://$IP (port 80)"
          echo "  Grafana: http://$IP/grafana (admin/admin)"
